<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lance YI-Blog</title>
  
  <subtitle>以戒为师 以苦为师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.LanceYI.com/"/>
  <updated>2018-10-04T13:09:38.208Z</updated>
  <id>https://blog.LanceYI.com/</id>
  
  <author>
    <name>Lance YI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS上部署Spring boot项目</title>
    <link href="https://blog.LanceYI.com/notes/2018-10-04/CentOS%E4%B8%8A%E9%83%A8%E7%BD%B2Spring-boot%E9%A1%B9%E7%9B%AE.html"/>
    <id>https://blog.LanceYI.com/notes/2018-10-04/CentOS上部署Spring-boot项目.html</id>
    <published>2018-10-04T13:04:11.000Z</published>
    <updated>2018-10-04T13:09:38.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="yum方式安装JDK"><a href="#yum方式安装JDK" class="headerlink" title="yum方式安装JDK"></a>yum方式安装JDK</h2><ol><li>直接打开 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">java SE官网</a> 选择java版本</li><li>选择对应的版本</li></ol><p><img src="http://markdown.xiaoshujiang.com/b3d7743d-747c-488f-8b24-5ef40c9c6b38" alt="选择JDK版本"></p><ol start="3"><li>打开控制台，查看yum库中有哪些jdk版本<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search java|grep jdk</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="4"><li>选择版本，进行安装</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 选择版本进行安装</span><br><span class="line">yum instakkjava-1.8.0-openjdk</span><br><span class="line">// 安装完成之后，默认安装目录在 /usr/lib/jvm/java-1.8.0-openjdk-*.x86_64</span><br></pre></td></tr></table></figure><ol start="5"><li>设置环境变量</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">// 添加如下内容</span><br><span class="line"></span><br><span class="line"><span class="comment">#set java environment </span></span><br><span class="line">JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-*.x86_64 </span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre </span><br><span class="line">CLASS_PATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib </span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin </span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH PATH </span><br><span class="line"></span><br><span class="line">// ESC退出编辑wq保存，让配置生效</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;yum方式安装JDK&quot;&gt;&lt;a href=&quot;#yum方式安装JDK&quot; class=&quot;headerlink&quot; title=&quot;yum方式安装JDK&quot;&gt;&lt;/a&gt;yum方式安装JDK&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;直接打开 &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;java SE官网&lt;/a&gt; 选择java版本&lt;/li&gt;
&lt;li&gt;选择对应的版本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://markdown.xiaoshujiang.com/b3d7743d-747c-488f-8b24-5ef40c9c6b38&quot; alt=&quot;选择JDK版本&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;打开控制台，查看yum库中有哪些jdk版本&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum search java|grep jdk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.LanceYI.com/categories/notes/"/>
    
    
      <category term="skill" scheme="https://blog.LanceYI.com/tags/skill/"/>
    
      <category term="java" scheme="https://blog.LanceYI.com/tags/java/"/>
    
      <category term="Spring Boot" scheme="https://blog.LanceYI.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>GIT使用出现错误解决方案-持续更新中</title>
    <link href="https://blog.LanceYI.com/notes/2018-10-04/GIT%E4%BD%BF%E7%94%A8%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD.html"/>
    <id>https://blog.LanceYI.com/notes/2018-10-04/GIT使用出现错误解决方案-持续更新中.html</id>
    <published>2018-10-04T13:02:56.000Z</published>
    <updated>2018-10-04T13:03:46.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、git-push-报错error-remote-unpack-failed-unpack-objects-abnormal-exit"><a href="#1、git-push-报错error-remote-unpack-failed-unpack-objects-abnormal-exit" class="headerlink" title="1、git push 报错error: remote unpack failed: unpack-objects abnormal exit"></a>1、git push 报错error: remote unpack failed: unpack-objects abnormal exit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">远程仓库权限问题，进入到仓库目录控制台输入</span><br><span class="line"></span><br><span class="line">chown -R git:git somthing.git</span><br><span class="line"></span><br><span class="line">问题即可解决</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、git-push-报错error-remote-unpack-failed-unpack-objects-abnormal-exit&quot;&gt;&lt;a href=&quot;#1、git-push-报错error-remote-unpack-failed-unpack-objects-abnormal-exit&quot; class=&quot;headerlink&quot; title=&quot;1、git push 报错error: remote unpack failed: unpack-objects abnormal exit&quot;&gt;&lt;/a&gt;1、git push 报错error: remote unpack failed: unpack-objects abnormal exit&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;远程仓库权限问题，进入到仓库目录控制台输入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chown -R git:git somthing.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;问题即可解决&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.LanceYI.com/categories/notes/"/>
    
    
      <category term="skill" scheme="https://blog.LanceYI.com/tags/skill/"/>
    
      <category term="git" scheme="https://blog.LanceYI.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>intellij IDEA 使用部署注意事项</title>
    <link href="https://blog.LanceYI.com/notes/2018-10-04/intellij-IDEA-%E4%BD%BF%E7%94%A8%E9%83%A8%E7%BD%B2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html"/>
    <id>https://blog.LanceYI.com/notes/2018-10-04/intellij-IDEA-使用部署注意事项.html</id>
    <published>2018-10-04T13:00:25.000Z</published>
    <updated>2018-10-04T13:01:28.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>在开发阶段的时候最重要的是单元测试了，springboot对单元测试的支持已经很完善了。</p><p>1、在pom包中添加spring-boot-starter-test包引用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>2、开发测试类</p><p>以最简单的helloworld为例，在测试类的类头部需要添加：<code>@RunWith(SpringRunner.class)</code>和<code>@SpringBootTest</code>注解，在测试方法的顶端添加<code>@Test</code>即可，最后在方法上点击右键run就可以运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际使用中，可以按照项目的正常使用去注入dao层代码或者是service层代码进行测试验证，spring-boot-starter-test提供很多基础用法，更难得的是增加了对Controller层测试的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单验证结果集是否正确</span></span><br><span class="line">Assert.assertEquals(<span class="number">3</span>, userMapper.getAll().size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证结果集，提示</span></span><br><span class="line">Assert.assertTrue(<span class="string">"错误，正确的返回值为200"</span>, status == <span class="number">200</span>); </span><br><span class="line">Assert.assertFalse(<span class="string">"错误，正确的返回值为200"</span>, status != <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>引入了<code>MockMvc</code>支持了对Controller层的测试，简单示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControlerTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化执行</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证controller是否正常响应并打印返回结果</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andReturn();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//验证controller是否正常响应并判断返回结果是否正确</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"Hello World"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单元测试是验证你代码第一道屏障，要养成每写一部分代码就进行单元测试的习惯，不要等到全部集成后再进行测试，集成后因为更关注整体运行效果，很容易遗漏掉代码底层的bug.</p><p><strong>集成测试</strong></p><p>整体开发完成之后进入集成测试，spring boot项目的启动入口在 Application类中，直接运行run方法就可以启动项目，但是在调试的过程中我们肯定需要不断的去调试代码，如果每修改一次代码就需要手动重启一次服务就很麻烦，spring boot非常贴心的给出了热部署的支持，很方便在web项目中调试使用。</p><p>pom需要添加以下的配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><p>添加以上配置后，项目就支持了热部署，非常方便集成测试。</p><h2 id="项目打包之jar包、war包"><a href="#项目打包之jar包、war包" class="headerlink" title="项目打包之jar包、war包"></a>项目打包之jar包、war包</h2><blockquote><p>1、mvn 不是内部命令</p></blockquote><ul><li>设置环境变量（用户）</li><li>添加Path路径（D:\Intellij IDEA\plugins\meaven\lib\meaven3\bin）</li></ul><blockquote><p>2、如何打成jar包</p></blockquote><p>如果你使用的是maven来管理项目，执行以下命令既可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、cd 项目跟目录（和pom.xml同级）</span><br><span class="line">2、 mvn clean package</span><br><span class="line">## 或者执行下面的命令</span><br><span class="line">## 排除测试代码后进行打包</span><br><span class="line">3、mvn clean package  -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p>打包完成后jar包会生成到target目录下，命名一般是 项目名+版本号.jar</p><p>启动jar包命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar  target/spring-boot-scheduler-1.0.0.jar</span><br></pre></td></tr></table></figure><p>这种方式，只要控制台关闭，服务就不能访问了。下面我们使用在后台运行的方式来启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar target/spring-boot-scheduler-1.0.0.jar &amp;</span><br></pre></td></tr></table></figure><p>也可以在启动的时候选择读取不同的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar app.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p>也可以在启动的时候设置jvm参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms10m -Xmx80m -jar app.jar &amp;</span><br></pre></td></tr></table></figure><p><strong>gradle</strong></p><p>如果使用的是gradle,使用下面命令打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gradle build</span><br><span class="line">java -jar build/libs/mymodule-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><blockquote><p>如何打成war包</p></blockquote><p>打成war包一般可以分两种方式来实现，第一种可以通过eclipse这种开发工具来导出war包，另外一种是使用命令来完成，这里主要介绍后一种</p><p><strong>1、maven项目，修改pom.xml</strong></p><p>将</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><p>改成<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></p><p><strong>2、打包时排除tomcat.</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在这里将scope属性设置为provided，这样在最终形成的WAR中不会包含这个JAR包，因为Tomcat或Jetty等服务器在运行时将会提供相关的API类。</p><p><strong>3、注册启动类</strong></p><p>创建ServletInitializer.java，继承SpringBootServletInitializer ，覆盖configure()，把启动类Application注册进去。外部web应用服务器构建Web Application Context的时候，会把启动类添加进去。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package  -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure></p><p>会在target目录下生成：项目名+版本号.war文件，拷贝到tomcat服务器中启动即可。</p><p><strong>gradle</strong></p><p>如果使用的是gradle,基本步奏一样，build.gradle中添加war的支持，排除spring-boot-starter-tomcat：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">apply plugin: &apos;war&apos;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(&quot;org.springframework.boot:spring-boot-starter-web:1.4.2.RELEASE&quot;)&#123;</span><br><span class="line">    exclude mymodule:&quot;spring-boot-starter-tomcat&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>再使用构建命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle build</span><br></pre></td></tr></table></figure></p><p>war会生成在build\libs 目录下。</p><h2 id="生产运维"><a href="#生产运维" class="headerlink" title="生产运维"></a>生产运维</h2><p><strong>查看JVM参数的值</strong><br>可以根据java自带的jinfo命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flags pid</span><br></pre></td></tr></table></figure></p><p>来查看jar 启动后使用的是什么gc、新生代、老年代分批的内存都是多少，示例如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:CICompilerCount=3 -XX:InitialHeapSize=234881024 -XX:MaxHeapSize=3743416320 -XX:MaxNewSize=1247805440 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=78118912 -XX:OldSize=156762112 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseFastUnorderedTimeStamps -XX:+UseParallelGC</span><br></pre></td></tr></table></figure></p><ul><li>-XX:CICompilerCount ：最大的并行编译数</li><li>-XX:InitialHeapSize 和 -XX:MaxHeapSize ：指定JVM的初始和最大堆内存大小</li><li>-XX:MaxNewSize ： JVM堆区域新生代内存的最大可分配大小</li><li>…</li><li>-XX:+UseParallelGC ：垃圾回收使用Parallel收集器</li></ul><h2 id="如何重启"><a href="#如何重启" class="headerlink" title="如何重启"></a>如何重启</h2><p><strong>简单粗暴</strong><br>直接kill掉进程再次启动jar包<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep java </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#拿到对于Java程序的pid</span></span></span><br><span class="line">kill -9 pid</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 再次重启</span></span></span><br><span class="line">Java -jar  xxxx.jar</span><br></pre></td></tr></table></figure></p><p><strong>脚本执行</strong><br>如果使用的是maven,需要包含以下的配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;executable&gt;true&lt;/executable&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p><p>如果使用是gradle，需要包含下面配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springBoot &#123;</span><br><span class="line">    executable = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动方式：</p><ol><li>可以直接./yourapp.jar 来启动</li><li>注册为服务</li></ol><p>也可以做一个软链接指向你的jar包并加入到init.d中，然后用命令来启动。</p><p>init.d 例子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /var/yourapp/yourapp.jar /etc/init.d/yourapp</span><br><span class="line">chmod +x /etc/init.d/yourapp</span><br></pre></td></tr></table></figure><p>这样就可以使用stop或者是restart命令去管理你的应用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/yourapp start|stop|restart</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service yourapp start|stop|restart</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;p&gt;在开发阶段的时候最重要的是单元测试了，springboot对单元测试的支持已经很完善了。&lt;/p&gt;
&lt;p&gt;1、在pom包中添加spring-boot-starter-test包引用&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.LanceYI.com/categories/notes/"/>
    
    
      <category term="skill" scheme="https://blog.LanceYI.com/tags/skill/"/>
    
      <category term="java" scheme="https://blog.LanceYI.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>vue开发微信公众号支付防止采坑指南秘籍</title>
    <link href="https://blog.LanceYI.com/notes/2018-10-04/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7SPA%E6%94%AF%E4%BB%98%E9%98%B2%E6%AD%A2%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97.html"/>
    <id>https://blog.LanceYI.com/notes/2018-10-04/微信公众号SPA支付防止采坑指南.html</id>
    <published>2018-10-04T12:50:49.000Z</published>
    <updated>2018-10-04T12:58:41.659Z</updated>
    
    <content type="html"><![CDATA[<ul><li>vue-router路由使用hash模式(#分隔)</li><li>项目url(即js中location.href)分隔符#前面需要增加一个问号(?),即location.hash不能为空，至少有一个问号。如果没有问号，则js跳转到有问号的url上，跳转代码见后面微信模板消息部分</li><li>项目url location.pathname部分，必须以斜杠(/)结尾，如果不是，则跳转，代码同上</li><li>签名or加密的时候，wx.config签名通过window.location.href.split(‘#’)[0]获取签名使用的url</li><li>接上，而微信支付签名使用的url，通过用window.location.href获取</li><li>每次url更改的时候，重新调用JSSDK的config接口</li><li>为了解决微信支付要求至少二级目录的问题，所有前端url，统一加一个/wap前缀，变成 http(s)://rmwwap.runmin.shop/wap/#/index 的形式，同时在微信后台设置支付目录为 http(s)://rmwwap.runmin.shop/wap/</li><li>每次url变化后，重新进行微信config，并且重新设置微信分享接口(onMenuShare系列接口)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;vue-router路由使用hash模式(#分隔)&lt;/li&gt;
&lt;li&gt;项目url(即js中location.href)分隔符#前面需要增加一个问号(?),即location.hash不能为空，至少有一个问号。如果没有问号，则js跳转到有问号的url上，跳转代码见
      
    
    </summary>
    
      <category term="notes" scheme="https://blog.LanceYI.com/categories/notes/"/>
    
    
      <category term="skill" scheme="https://blog.LanceYI.com/tags/skill/"/>
    
      <category term="wechat" scheme="https://blog.LanceYI.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>自学Java中，一份答答租车系统作业~</title>
    <link href="https://blog.LanceYI.com/notes/2018-06-17/imooctask.html"/>
    <id>https://blog.LanceYI.com/notes/2018-06-17/imooctask.html</id>
    <published>2018-06-17T15:31:00.000Z</published>
    <updated>2018-06-17T16:10:21.631Z</updated>
    
    <content type="html"><![CDATA[<pre><code>路漫漫其修远兮，吾将上下而求索！在人生职业规划中，作为一个前端工作者和热爱计算机这个行业的人来说，只是局限于做前端是远远不够的，于是我准备学习一门后端语言，于是我选择的Java，在慕客网上看教程学习，这个对于一个刚入门的来说，应该是一个不错的选择，在看完第二季教学视频之后，老师布置了一份答答租车系统的作业。好吧，于是就写了一份，也学有很多比我写的好，也有写的比我优秀的。这不足为其，因为到达罗马的道路有很多，我只是其中的一条，重在分享和记录我的学习笔记。嘿嘿~</code></pre><a id="more"></a><h2 id="答答租车-主要用到的几个知识点"><a href="#答答租车-主要用到的几个知识点" class="headerlink" title="答答租车 主要用到的几个知识点"></a>答答租车 主要用到的几个知识点</h2><ul><li>Java 继承</li><li>Java 抽象类</li><li>Java util.* 中的工具类</li></ul><p>下面就开始我们代码之旅：</p><blockquote><p>创建Car.java 抽象类</p></blockquote><p><strong>Car.java文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydsweb.dada;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="comment">// 序号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">// 名称</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">// 租金</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> rent;</span><br><span class="line">    <span class="comment">// 天数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> days;</span><br><span class="line">    <span class="comment">// 数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> rentNum;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> days</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDays</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> days 要设置的 days</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDays</span><span class="params">(<span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.days = days;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> rentNum</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRentNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rentNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rentNum 要设置的 rentNum</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRentNum</span><span class="params">(<span class="keyword">int</span> rentNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rentNum = rentNum;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 车辆信息抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">infoMation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建Bus.java Pickup.java Truck.java三个子类，并继承Car类</p></blockquote><p><strong>Bus.java文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydsweb.dada;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BonJour</span></span><br><span class="line"><span class="comment"> * 汽车(子类): 载人属性重写</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 载人量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> peopleCapacity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> peopleCapacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPeopleCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> peopleCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> peopleCapacity 要设置的 peopleCapacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeopleCapacity</span><span class="params">(<span class="keyword">int</span> peopleCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.peopleCapacity = peopleCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的构造函数存根</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> rent, <span class="keyword">int</span> peopleCapacity)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的构造函数存根</span></span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.rent = rent;</span><br><span class="line"><span class="keyword">this</span>.peopleCapacity = peopleCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Bus</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> rent, <span class="keyword">int</span> peopleCapacity, <span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的构造函数存根</span></span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.rent = rent;</span><br><span class="line"><span class="keyword">this</span>.peopleCapacity = peopleCapacity;</span><br><span class="line"><span class="keyword">this</span>.days = days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infoMation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"> System.out.println(id + <span class="string">".\t\t"</span> + name + <span class="string">"\t\t"</span> + rent + <span class="string">"元/天\t\t载人："</span> + peopleCapacity + <span class="string">"人"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Pickup.java 文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydsweb.dada;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BonJour</span></span><br><span class="line"><span class="comment"> * 卡车(子类): 载货属性、抽象类覆盖infoMation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pickup</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="comment">// 载人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> peopleCapacity;</span><br><span class="line">    <span class="comment">// 载货</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cargoCapacity;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> peopleCapacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPeopleCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> peopleCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> peopleCapacity 要设置的 peopleCapacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPeopleCapacity</span><span class="params">(<span class="keyword">int</span> peopleCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.peopleCapacity = peopleCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> cargoCapacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCargoCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cargoCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cargoCapacity 要设置的 cargoCapacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCargoCapacity</span><span class="params">(<span class="keyword">int</span> cargoCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cargoCapacity = cargoCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Pickup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的构造函数存根</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Pickup</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> rent, <span class="keyword">int</span> peopleCapacity, <span class="keyword">int</span> cargoCapacity, <span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">        <span class="keyword">this</span>.peopleCapacity = peopleCapacity;</span><br><span class="line">        <span class="keyword">this</span>.cargoCapacity = cargoCapacity;</span><br><span class="line">        <span class="keyword">this</span>.days = days;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pickup</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> rent, <span class="keyword">int</span> peopleCapacity, <span class="keyword">int</span> cargoCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">        <span class="keyword">this</span>.peopleCapacity = peopleCapacity;</span><br><span class="line">        <span class="keyword">this</span>.cargoCapacity = cargoCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infoMation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"> System.out.println(id + <span class="string">".\t\t"</span> + name + <span class="string">"\t\t"</span> + rent + <span class="string">"元/天\t\t载人："</span> + peopleCapacity + <span class="string">"人，载货："</span> + cargoCapacity + <span class="string">"吨"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Truck.java 文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydsweb.dada;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BonJour</span></span><br><span class="line"><span class="comment"> * 卡车(子类)： 载货属性、抽象方法覆盖infoMation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Truck</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="comment">// 载货吨数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cargoCapacity;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> cargoCapacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCargoCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cargoCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cargoCapacity 要设置的 cargoCapacity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCargoCapacity</span><span class="params">(<span class="keyword">int</span> cargoCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cargoCapacity = cargoCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Truck</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的构造函数存根</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Truck</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> rent, <span class="keyword">int</span> cargoCapacity, <span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">        <span class="keyword">this</span>.cargoCapacity = cargoCapacity;</span><br><span class="line">        <span class="keyword">this</span>.days = days;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Truck</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> rent, <span class="keyword">int</span> cargoCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">        <span class="keyword">this</span>.cargoCapacity = cargoCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infoMation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line">System.out.println(id + <span class="string">".\t\t"</span> + name + <span class="string">"\t\t"</span> + rent + <span class="string">"元/天\t\t载货："</span> + cargoCapacity + <span class="string">"吨"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>写入入口主程序 InitialCar.java</p></blockquote><p><strong>InitialCar.java文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydsweb.dada;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialCar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 循环，直到return退出方法</span></span><br><span class="line">label1: <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">// 数组存放系统中车辆信息</span></span><br><span class="line">Car[] cars = &#123; </span><br><span class="line"><span class="keyword">new</span> Bus(<span class="number">1</span>, <span class="string">"奔驰"</span>, <span class="number">1800</span>, <span class="number">5</span>), </span><br><span class="line"><span class="keyword">new</span> Bus(<span class="number">2</span>, <span class="string">"宝马"</span>, <span class="number">2400</span>, <span class="number">5</span>), </span><br><span class="line"><span class="keyword">new</span> Bus(<span class="number">3</span>, <span class="string">"金龙"</span>, <span class="number">1200</span>, <span class="number">20</span>),</span><br><span class="line"><span class="keyword">new</span> Truck(<span class="number">4</span>, <span class="string">"标志"</span>, <span class="number">1500</span>, <span class="number">20</span>),</span><br><span class="line"><span class="keyword">new</span> Truck(<span class="number">5</span>, <span class="string">"东风"</span>, <span class="number">1100</span>, <span class="number">12</span>), </span><br><span class="line"><span class="keyword">new</span> Pickup(<span class="number">6</span>, <span class="string">"瑞奇"</span>, <span class="number">1000</span>, <span class="number">4</span>, <span class="number">6</span>) </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 向控制台输入值</span></span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"欢迎来到答答租车，我是智能机器人小答，很高兴为您服务：租车请按1，退出请按0:"</span>);</span><br><span class="line"><span class="comment">// 获取到输入的值</span></span><br><span class="line"><span class="comment">// int confirm1 = input.nextInt(); // 当输入非整数时，抛出：Exception in thread "main"</span></span><br><span class="line"><span class="comment">// java.util.InputMismatchException</span></span><br><span class="line">String confirm1 = input.next();</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"1"</span>.equals(confirm1)) &#123;</span><br><span class="line">System.out.println(<span class="string">"尊敬的客户您好，下面是有效的车辆信息，请查阅：\n"</span>);</span><br><span class="line"><span class="comment">// 输出列表的头信息</span></span><br><span class="line">System.out.println(<span class="string">"序号\t\t汽车名\t\t租金\t\t容量"</span>);</span><br><span class="line"><span class="keyword">for</span> (Car car : cars) &#123;</span><br><span class="line"><span class="keyword">if</span> (car <span class="keyword">instanceof</span> Bus) &#123; <span class="comment">// 载人车辆调用载人信息</span></span><br><span class="line">Bus bus = (Bus) car;</span><br><span class="line">bus.infoMation();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (car <span class="keyword">instanceof</span> Truck) &#123; <span class="comment">// 载货车辆调用载货信息</span></span><br><span class="line">Truck truck = (Truck) car;</span><br><span class="line">truck.infoMation();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (car <span class="keyword">instanceof</span> Pickup) &#123; <span class="comment">// 载人，载货车辆调用载人，载货信息</span></span><br><span class="line">Pickup pickup = (Pickup) car;</span><br><span class="line">pickup.infoMation();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"车辆录入信息有误，即将自动退出系统"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放租车信息</span></span><br><span class="line">Map&lt;Car, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始租车</span></span><br><span class="line">label2: <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请选择您租车的序号，序号值范围：1——"</span> + cars.length);</span><br><span class="line">String carId = input.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 记录租车序号</span></span><br><span class="line"><span class="keyword">int</span> realCarId = Integer.parseInt(carId);</span><br><span class="line"><span class="keyword">if</span> (realCarId &lt; <span class="number">1</span> || realCarId &gt; cars.length) &#123;</span><br><span class="line">System.out.println(<span class="string">"对不起，您输入的序号值不在规定范围内，请检查后，重新输入！"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Car car : cars) &#123; <span class="comment">// 找到所选择的车辆信息</span></span><br><span class="line"><span class="keyword">if</span> (car.id == realCarId) &#123;</span><br><span class="line">System.out.println(<span class="string">"您当前所选择的租车信息如下："</span>);</span><br><span class="line"><span class="comment">// 定义租用每辆车的初始值</span></span><br><span class="line"><span class="keyword">int</span> rent = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (car <span class="keyword">instanceof</span> Bus) &#123; <span class="comment">// 载人车辆调用载人信息</span></span><br><span class="line">Bus bus = (Bus) car;</span><br><span class="line">bus.infoMation();</span><br><span class="line">rent = bus.rent;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (car <span class="keyword">instanceof</span> Truck) &#123; <span class="comment">// 载货车辆调用载货信息</span></span><br><span class="line">Truck truck = (Truck) car;</span><br><span class="line">truck.infoMation();</span><br><span class="line">rent = truck.rent;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (car <span class="keyword">instanceof</span> Pickup) &#123; <span class="comment">// 载人，载货车辆调用载人，载货信息</span></span><br><span class="line">Pickup pickup = (Pickup) car;</span><br><span class="line">pickup.infoMation();</span><br><span class="line">rent = pickup.rent;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"确认租车，请按1，退出请按0："</span>);</span><br><span class="line"><span class="keyword">int</span> confirm2 = input.nextInt();</span><br><span class="line"><span class="keyword">if</span> (confirm2 == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 选择租车数量</span></span><br><span class="line">System.out.println(<span class="string">"请选择租车数量："</span>);</span><br><span class="line"><span class="keyword">int</span> rentNum = input.nextInt();</span><br><span class="line"><span class="comment">// 更新map中租车天数，key值相同的value值累加</span></span><br><span class="line"><span class="keyword">if</span> (car.getRentNum() == <span class="number">0</span>) &#123;</span><br><span class="line">map.put(car, rentNum);</span><br><span class="line">car.setRentNum(rentNum);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map.put(car, car.getRentNum() + rentNum);</span><br><span class="line">car.setRentNum(car.getRentNum() + rentNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将map转换为entry对象，利用Iterator便于获取key,value</span></span><br><span class="line">Set&lt;Map.Entry&lt;Car, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择租车天数</span></span><br><span class="line">System.out.println(<span class="string">"请选择租车天数："</span>);</span><br><span class="line"><span class="keyword">int</span> rentDays = input.nextInt();</span><br><span class="line"><span class="comment">// 将天数设置到租车信息中</span></span><br><span class="line"><span class="keyword">if</span> (car.getDays() == <span class="number">0</span>) &#123;</span><br><span class="line">car.setDays(rentDays);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">car.setDays(car.getDays() + rentDays);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否选择继续租车</span></span><br><span class="line">System.out.println(<span class="string">"继续租车，请按1，退出系统，请按0："</span>);</span><br><span class="line"><span class="keyword">int</span> confirm4 = input.nextInt();</span><br><span class="line"><span class="keyword">if</span> (confirm4 == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">// 退出本次循环，重新输入租车序号</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (confirm4 == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 退出系统前，输出租车详情单</span></span><br><span class="line">System.out.println(<span class="string">"您的租车账单为："</span>);</span><br><span class="line"><span class="comment">// 输出列表的头信息</span></span><br><span class="line">System.out.println(<span class="string">"序号\t\t汽车名\t租金\t\t\t\t容量\t\t\t\t\t\t数量\t\t天数"</span>);</span><br><span class="line"><span class="comment">// 通过迭代器循环迭代entries中的map</span></span><br><span class="line"><span class="keyword">if</span> (entries != <span class="keyword">null</span>) &#123;</span><br><span class="line">Iterator&lt;Entry&lt;Car, Integer&gt;&gt; iterator = entries.iterator();</span><br><span class="line"><span class="comment">// todo Collections.sort();</span></span><br><span class="line"><span class="comment">// 租车总数量</span></span><br><span class="line"><span class="keyword">int</span> carNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总载客量</span></span><br><span class="line"><span class="keyword">int</span> peopleCapacity = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总载货量</span></span><br><span class="line"><span class="keyword">int</span> cargoCapacity = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 租车总金额</span></span><br><span class="line"><span class="keyword">int</span> rentSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环迭代整个entry对象</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">Entry&lt;Car, Integer&gt; next = iterator.next();</span><br><span class="line">Car currentCar = next.getKey();</span><br><span class="line"><span class="comment">// 当前租车数量</span></span><br><span class="line">Integer count = next.getValue();</span><br><span class="line"><span class="comment">// 计算租车总数量</span></span><br><span class="line">carNum += count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前车辆天数</span></span><br><span class="line"><span class="keyword">int</span> days = currentCar.days;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前车辆租金（1车1天）</span></span><br><span class="line"><span class="keyword">int</span> perCent = currentCar.rent;</span><br><span class="line">rentSum += perCent * count * days;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算单独车辆类型的属性总值</span></span><br><span class="line"><span class="keyword">if</span> (currentCar <span class="keyword">instanceof</span> Bus) &#123; <span class="comment">// 载人车辆调用载人信息</span></span><br><span class="line">Bus bus = (Bus) currentCar;</span><br><span class="line">peopleCapacity += bus.getPeopleCapacity() * count; <span class="comment">//</span></span><br><span class="line">System.out.println(bus.id + <span class="string">".\t\t"</span> + bus.name + <span class="string">"\t\t"</span></span><br><span class="line">+ bus.rent + <span class="string">"元/天\t\t载人："</span> + bus.getPeopleCapacity()</span><br><span class="line">+ <span class="string">"人\t\t\t\t"</span> + count + <span class="string">"\t\t"</span> + bus.getDays());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentCar <span class="keyword">instanceof</span> Truck) &#123; <span class="comment">// 载货车辆调用载货信息</span></span><br><span class="line">Truck truck = (Truck) currentCar;</span><br><span class="line">cargoCapacity += truck.getCargoCapacity() * count;</span><br><span class="line">System.out.println(truck.id + <span class="string">".\t\t"</span> + truck.name + <span class="string">"\t\t"</span></span><br><span class="line">+ truck.rent + <span class="string">"元/天\t\t载货："</span></span><br><span class="line">+ truck.getCargoCapacity() + <span class="string">"吨\t\t\t\t"</span> + count</span><br><span class="line">+ <span class="string">"\t\t"</span> + truck.getDays());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentCar <span class="keyword">instanceof</span> Pickup) &#123; <span class="comment">// 载人，载货车辆调用载人，载货信息</span></span><br><span class="line">Pickup pickup = (Pickup) currentCar;</span><br><span class="line">peopleCapacity += pickup.getPeopleCapacity() * count;</span><br><span class="line">cargoCapacity += pickup.getCargoCapacity() * count;</span><br><span class="line">System.out.println(pickup.id + <span class="string">".\t\t"</span> + pickup.name</span><br><span class="line">+ <span class="string">"\t\t"</span> + pickup.rent + <span class="string">"元/天\t\t载人："</span></span><br><span class="line">+ pickup.getPeopleCapacity() + <span class="string">"人，载货："</span></span><br><span class="line">+ pickup.getCargoCapacity() + <span class="string">"吨\t\t"</span> + count</span><br><span class="line">+ <span class="string">"\t\t"</span> + pickup.getDays());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环完毕，计算相关总量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出租车总数量</span></span><br><span class="line">System.out.println(<span class="string">"您租车的总数量是："</span> + carNum + <span class="string">"辆"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出载客总人数</span></span><br><span class="line">System.out.println(<span class="string">"您租车的总载客人数是："</span> + peopleCapacity + <span class="string">"人"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出载货总吨数</span></span><br><span class="line">System.out.println(<span class="string">"您租车的总载货吨数是："</span> + cargoCapacity + <span class="string">"吨"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出租车总金额</span></span><br><span class="line">System.out.println(<span class="string">"您租车的总金额是："</span> + rentSum + <span class="string">"元"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束语</span></span><br><span class="line">System.out.println(<span class="string">"很高兴为您服务，期待您的下次光临，祝你旅途愉快，一路顺风！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (confirm2 == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"很高兴为您服务，期待下次光临，再见！"</span>);</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// 不租车，跳过最外层循环，退出系统</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(<span class="string">"对不起，您输入的序号值不是整数类型，请检查后，重新输入！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"0"</span>.equals(confirm1)) &#123;</span><br><span class="line">System.out.println(<span class="string">"很高兴为您服务，期待下次光临，再见！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"对不起，您输入的值有误，请重新输入1：租车，0：退出，即将返回到欢迎页面！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，我们的程序程序就已经完成，就可以直接运行了。希望大家给出改进的意见！</p><p>作者： Bonjour<br>转载请注明出处： <a href="http://blog.ydsweb.cn/notes/2018-06-17/imooctask.html" target="_blank" rel="noopener">http://blog.ydsweb.cn/notes/2018-06-17/imooctask.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;路漫漫其修远兮，吾将上下而求索！
在人生职业规划中，作为一个前端工作者和热爱计算机这个行业的人来说，只是局限于做前端是远远不够的，于是我准备学习一门后端语言，于是我选择的Java，在慕客网上看教程学习，这个对于一个刚入门的来说，应该是一个不错的选择，在看完第二季教学视频之后，老师布置了一份答答租车系统的作业。好吧，于是就写了一份，也学有很多比我写的好，也有写的比我优秀的。这不足为其，因为到达罗马的道路有很多，我只是其中的一条，重在分享和记录我的学习笔记。嘿嘿~
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.LanceYI.com/categories/notes/"/>
    
    
      <category term="skill" scheme="https://blog.LanceYI.com/tags/skill/"/>
    
      <category term="java" scheme="https://blog.LanceYI.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java初学者总结的一些注意事项</title>
    <link href="https://blog.LanceYI.com/notes/2018-06-05/javabeginner.html"/>
    <id>https://blog.LanceYI.com/notes/2018-06-05/javabeginner.html</id>
    <published>2018-06-05T02:47:35.000Z</published>
    <updated>2018-10-04T12:51:43.103Z</updated>
    
    <content type="html"><![CDATA[<pre><code>java有三个版本： 分别为 J2SE、J2EE和J2ME    - J2SE(Java 2 Platform Standard Edition) 标准版    - J2EE(Java 2 Platform Enterprise Edition) 企业版    - J2ME(Java 2 Platform Micro Edition) 微型版注意: Java5.0版本后，J2SE、J2EE、J2ME分别更名为JavaSE、JavaEE、JavaME，由于习惯的原因，我们依然称之为J2SE、J2EE、J2ME</code></pre>  <a id="more"></a><h2 id="一、开发环境搭建"><a href="#一、开发环境搭建" class="headerlink" title="一、开发环境搭建"></a>一、开发环境搭建</h2><ul><li><p><strong>JDK下载和安装</strong> <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener">javaSE</a></p></li><li><p><strong>环境变量的设置</strong></p><ul><li>JAVA_HOME：设为JDK的安装路径(如D:\Program Files\jdk1.7.0_71)，此路径下包括lib，bin，jre等文件夹（此变量最好设置，因为以后运行tomcat，eclipse等都需要依靠此变量）。</li><li>Path：使得系统可以在任何路径下识别java命令，设为：%JAVA_HOME%\bin。%JAVA_HOME%就是引用前面指定的JAVA_HOME变量.</li><li>CLASSPATH：Java运行环境加载类的路径，只有类在classpath中，才能被识别和加载，设为 .;%JAVA_HOME%\lib（注意前面的点号(.)，点号表示当前路径）。</li></ul></li><li><p>Eclipse安装 <a href="http://www.eclipse.org/downloads/" target="_blank" rel="noopener">Eclipse下载</a><br><em>注意：一定要设置环境变量，Eclipse 的运行依赖于这些环境变量</em></p></li></ul><h2 id="二、API-Application-Programming-Interface-应用程序编程接口-java-API文档"><a href="#二、API-Application-Programming-Interface-应用程序编程接口-java-API文档" class="headerlink" title="二、API(Application Programming Interface, 应用程序编程接口) java API文档"></a>二、API(Application Programming Interface, 应用程序编程接口) <a href="http://www.oracle.com/technetwork/java/api" target="_blank" rel="noopener">java API文档</a></h2><table><thead><tr><th>包名</th><th>说明</th></tr></thead><tbody><tr><td>java.lang</td><td>该包提供了Java编程的基础类，例如 Object、Math、String、StringBuffer、System、Thread等，不使用该包就很难编写Java代码了。</td></tr><tr><td>java.util</td><td>该包提供了包含集合框架、遗留的集合类、事件模型、日期和时间实施、国际化和各种实用工具类（字符串标记生成器、随机数生成器和位数组）。</td></tr><tr><td>java.io</td><td>该包通过文件系统、数据流和序列化提供系统的输入与输出。</td></tr><tr><td>java.net</td><td>该包提供实现网络应用与开发的类。</td></tr><tr><td>java.sql</td><td>该包提供了使用Java语言访问并处理存储在数据源（通常是一个关系型数据库）中的数据API。</td></tr><tr><td>java.awt</td><td>这两个包提供了GUI设计与开发的类。java.awt包提供了创建界面和绘制图形图像的所有类，而javax.swing包提供了一组“轻量级”的组件，尽量让这些组件在所有平台上的工作方式相同。</td></tr><tr><td>java.text</td><td>提供了与自然语言无关的方式来处理文本、日期、数字和消息的类和接口。</td></tr></tbody></table><h2 id="三、Java-import"><a href="#三、Java-import" class="headerlink" title="三、Java import"></a>三、Java import</h2><p><strong>注意：</strong></p><ul><li>import 只能导入包所包含的类，而不能导入包。</li><li>为方便起见，我们一般不导入单独的类，而是导入包下所有的类，例如 import java.util.*;。</li><li>Java 编译器默认为所有的 Java 程序导入了 JDK 的 java.lang 包中所有的类（import java.lang.*;）</li></ul><h2 id="四、Java数据类型"><a href="#四、Java数据类型" class="headerlink" title="四、Java数据类型"></a>四、Java数据类型</h2><p>Java中共有8种基本数据类型，包括4 种整型、2 种浮点型、1 种字符型、1 种布尔型，请见下表。</p><table><thead><tr><th>数据类型</th><th>说明</th><th>所占内存</th><th>例子</th><th>备注</th></tr></thead><tbody><tr><td>byte</td><td>字节型</td><td>1 byte</td><td>3, 127</td><td></td></tr><tr><td>short</td><td>短整型</td><td>2 bytes</td><td>3, 32767</td><td></td></tr><tr><td>int</td><td>整型</td><td>4 bytes</td><td>3, 21474836</td><td></td></tr><tr><td>long</td><td>长整型</td><td>8 bytes</td><td>3L, 92233720368L</td><td>long最后要有一个L字母（大小写无所谓）。</td></tr><tr><td>float</td><td>单精度浮点型</td><td>4 bytes</td><td>1.2F, 223.56F</td><td>float最后要有一个F字母（大小写无所谓）。</td></tr><tr><td>double</td><td>双精度浮点型</td><td>8 bytes</td><td>1.2, 1.2D, 223.56, 223.56D</td><td>double最后最好有一个D字母（大小写无所谓）。</td></tr><tr><td>char</td><td>字符型</td><td>2 bytes</td><td>‘a’, ‘A’</td><td>字符型数据只能是一个字符，由单引号包围</td></tr><tr><td>boolean</td><td>布尔型</td><td>1 bit</td><td>true, false</td><td>–</td></tr></tbody></table><h2 id="五、Java数据类型转换"><a href="#五、Java数据类型转换" class="headerlink" title="五、Java数据类型转换"></a>五、Java数据类型转换</h2><ul><li>自动数据类型转换<br>自动转换按从低到高的顺序转换。不同类型数据间的优先关系如下：<br>低—————————————————-&gt;高<br>byte,short,char-&gt; int -&gt; long -&gt; float -&gt; double</li><li>强制数据类型转换<br>强制转换的格式是在需要转型的数据前加上“()”，然后在括号内加入需要转化的数据类型。有的数据经过转型运算后，精度会丢失，而有的会更加精确，下面的例子可以说明这个问题。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">double</span> y;</span><br><span class="line">        x = (<span class="keyword">int</span>)<span class="number">34.56</span> + (<span class="keyword">int</span>)<span class="number">11.2</span>;  <span class="comment">// 丢失精度</span></span><br><span class="line">        y = (<span class="keyword">double</span>)x + (<span class="keyword">double</span>)<span class="number">10</span> + <span class="number">1</span>;  <span class="comment">// 提高精度</span></span><br><span class="line">        System.out.println(<span class="string">"x="</span> + x);</span><br><span class="line">        System.out.println(<span class="string">"y="</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果：</span></span><br><span class="line"><span class="comment">// x=45</span></span><br><span class="line"><span class="comment">// y=56.0</span></span><br></pre></td></tr></table></figure><h2 id="六、Java数组的定义和使用"><a href="#六、Java数组的定义和使用" class="headerlink" title="六、Java数组的定义和使用"></a>六、Java数组的定义和使用</h2><ul><li>数组的定义和内存分配 <ul><li>定义数组语法：<br>  type arrayName[];<br>  type[] arrayName;</li><li>分配内存空间<br>  arrayName=new type[arraySize];</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> demoArray[];</span><br><span class="line"><span class="keyword">int</span>[] demoArray;</span><br><span class="line"></span><br><span class="line">arrayName=<span class="keyword">new</span> type[arraySize];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通常，你可以在定义的同时分配空间，语法为：</span></span><br><span class="line">type arrayName[] = <span class="keyword">new</span> type[arraySize];</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>上面讲的是静态数组。静态数组一旦被声明，它的容量就固定了，不容改变。所以在声明数组时，一定要考虑数组的最大容量，防止容量不够的现象。</li><li>如果想在运行程序时改变容量，就需要用到数组列表(ArrayList，也称动态数组)或向量(Vector)。</li><li>正是由于静态数组容量固定的缺点，实际开发中使用频率不高，被 ArrayList 或 Vector 代替，因为实际开发中经常需要向数组中添加或删除元素，而它的容量不好预估。</li></ul><h2 id="七、Java字符串操作"><a href="#七、Java字符串操作" class="headerlink" title="七、Java字符串操作"></a>七、Java字符串操作</h2><ul><li>1) length() 方法  返回字符串的长度</li><li>2) charAt() 方法  按照索引值获得字符串中的指定字符</li><li>3) contains() 方法  检测字符串是否包含某个子串</li><li>4) replace() 方法  字符串替换，用来替换字符串中所有指定的子串</li><li>5) split() 方法  以指定字符串作为分隔符，对当前字符串进行分割，分割的结果是一个数组</li></ul><h2 id="八、Java-StringBuffer与StringBuider"><a href="#八、Java-StringBuffer与StringBuider" class="headerlink" title="八、Java StringBuffer与StringBuider"></a>八、Java StringBuffer与StringBuider</h2><pre><code>tring 的值是不可变的，每次对String的操作都会生成新的String对象，不仅效率低，而且耗费大量内存空间。StringBuffer类和String类一样，也用来表示字符串，但是StringBuffer的内部实现方式和String不同，在进行字符串处理时，不生成新的对象，在内存使用上要优于String。StringBuffer 默认分配16字节长度的缓冲区，当字符串超过该大小时，会自动增加缓冲区长度，而不是生成新的对象。</code></pre><p>StringBuffer不像String，只能通过 new 来创建对象，不支持简写方式，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer str1 = <span class="keyword">new</span> StringBuffer();  <span class="comment">// 分配16个字节长度的缓冲区</span></span><br><span class="line">StringBuffer str2 = =<span class="keyword">new</span> StringBuffer(<span class="number">512</span>);  <span class="comment">// 分配512个字节长度的缓冲区</span></span><br><span class="line"><span class="comment">// 在缓冲区中存放了字符串，并在后面预留了16个字节长度的空缓冲区</span></span><br><span class="line">StringBuffer str3 = <span class="keyword">new</span> StringBuffer(<span class="string">"www.ydsweb.cn"</span>);</span><br></pre></td></tr></table></figure><ul><li>StringBuffer类的主要方法<ul><li>append() 方法： 用于向当前字符串的末尾追加内容，类似于字符串的连接,调用该方法以后，StringBuffer对象的内容也发生改变。</li><li>deleteCharAt()： 用来删除指定位置的字符，并将剩余的字符形成新的字符串</li><li>insert() 方法： 用来在指定位置插入字符串，可以认为是append()的升级版</li><li>setCharAt() 方法： 用来修改指定位置的字符</li></ul></li></ul><p><strong>总结</strong></p><ul><li>线程安全：<br>StringBuffer：线程安全<br>StringBuilder：线程不安全</li><li>速度：<br>一般情况下，速度从快到慢为 StringBuilder &gt; StringBuffer &gt; String，当然这是相对的，不是绝对的</li><li>使用环境：<br>操作少量的数据使用 String；<br>单线程操作大量数据使用 StringBuilder；<br>多线程操作大量数据使用 StringBuffer。</li></ul><h2 id="九、Java类与对象"><a href="#九、Java类与对象" class="headerlink" title="九、Java类与对象"></a>九、Java类与对象</h2><ul><li>构造方法<ul><li>构造方法不能被显示调用。</li><li>构造方法不能有返回值，因为没有变量来接收返回值。</li></ul></li><li>创建对象<ul><li>声明：声明一个对象，包括对象名称和对象类型。</li><li>实例化：使用关键字new来创建一个对象。</li><li>初始化：使用new创建对象时，会调用构造方法初始化对象</li></ul></li><li>java访问修饰符<ul><li>父类中声明为public的方法在子类中也必须为public。</li><li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li><li>父类中默认修饰符声明的方法，能够在子类中声明为private。</li><li>父类中声明为private的方法，不能够被继承。</li><li>访问控制符可以让我们很方便的控制代码的权限：<ul><li>当需要让自己编写的类被所有的其他类访问时，就可以将类的访问控制符声明为 public。</li><li>当需要让自己的类只能被自己的包中的类访问时，就可以省略访问控制符。</li><li>当需要控制一个类中的成员数据时，可以将这个类中的成员数据访问控制符设置为 public、protected，或者省略。</li></ul></li></ul></li><li>Java变量的作用域<ul><li>方法内部除了能访问方法级的变量，还可以访问类级和实例级的变量。</li><li>块内部能够访问类级、实例级变量，如果块被包含在方法内部，它还可以访问方法级的变量。</li><li>方法级和块级的变量必须被显示地初始化，否则不能访问。</li></ul></li><li>Java this关键字详解<ul><li>在构造方法中调用另一个构造方法，调用动作必须置于最起始的位置。</li><li>不能在构造方法以外的任何方法内调用构造方法。</li><li>在一个构造方法内只能调用一个构造方法。</li></ul></li><li>Java方法重载<ul><li>说明：<ul><li>参数列表不同包括：个数不同、类型不同和顺序不同。</li><li>仅仅参数变量名称不同是不可以的。</li><li>跟成员方法一样，构造方法也可以重载。</li><li>声明为final的方法不能被重载。</li><li>声明为static的方法不能被重载，但是能够被再次声明。</li></ul></li><li>方法的重载的规则：<ul><li>方法名称必须相同。</li><li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ul></li><li>方法重载的实现：<ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错，这叫做重载分辨。</li></ul></li></ul></li><li>Java类的基本运行顺序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        name = <span class="string">"易大师"</span>;</span><br><span class="line">        age = <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Demo obj = <span class="keyword">new</span> Demo();</span><br><span class="line">        System.out.println(obj.name + <span class="string">"的年龄是"</span> + obj.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本运行顺序是：</p><pre><code>1. 先运行到第 9 行，这是程序的入口。2. 然后运行到第 10 行，这里要 new 一个Demo，就要调用 Demo 的构造方法。3. 就运行到第 5 行，注意：可能很多人觉得接下来就应该运行第 6 行了，错！初始化一个类，必须先初始化它的属性。4. 因此运行到第 2 行，然后是第 3 行。5. 属性初始化完过后，才回到构造方法，执行里面的代码，也就是第 6 行、第 7 行。6. 然后是第8行，表示 new 一个Demo实例完成。7. 然后回到 main 方法中执行第 11 行。8. 然后是第 12 行，main方法执行完毕。</code></pre><ul><li>Integer自动装箱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">500</span>;</span><br><span class="line">        Integer obj = m;  <span class="comment">// 自动装箱</span></span><br><span class="line">        <span class="keyword">int</span> n = obj;  <span class="comment">// 自动拆箱</span></span><br><span class="line">        System.out.println(<span class="string">"n = "</span> + n);</span><br><span class="line">      </span><br><span class="line">        Integer obj1 = <span class="number">500</span>;</span><br><span class="line">        System.out.println(<span class="string">"obj 等价于 obj1？"</span> + obj.equals(obj1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="comment">// n = 500</span></span><br><span class="line"><span class="comment">// obj 等价于 obj1？true</span></span><br></pre></td></tr></table></figure><ul><li>Java源文件的声明规则<br>当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则：</li></ul><ol><li>一个源文件中只能有一个public类。</li><li>一个源文件可以有多个非public类。</li><li>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</li><li>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</li><li>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</li><li>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li><li>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在后续章节介绍。</li><li>除了上面提到的几种类型，Java还有一些特殊的类，如内部类、匿名类。</li></ol><h2 id="十、Java继承和多态"><a href="#十、Java继承和多态" class="headerlink" title="十、Java继承和多态"></a>十、Java继承和多态</h2><ul><li>Java继承的概念与实现<br>构造方法不能被继承，掌握这一点很重要。 一个类能得到构造方法，只有两个办法：编写构造方法，或者根本没有构造方法，类有一个默认的构造方法。</li><li><p>Java super关键字<br>super 关键字的功能：</p><ul><li>调用父类中声明为 private 的变量。</li><li>点取已经覆盖了的方法。</li><li>作为方法名表示父类构造方法。<br>注意：</li><li>在构造方法中调用另一个构造方法，调用动作必须置于最起始的位置。</li><li>不能在构造方法以外的任何方法内调用构造方法。</li><li>在一个构造方法内只能调用一个构造方法。</li></ul></li><li><p>Java继承中方法的覆盖和重载</p><ul><li><p>方法覆盖的原则：</p><ol><li>覆盖方法的返回类型、方法名称、参数列表必须与原方法的相同。</li><li>覆盖方法不能比原方法访问性差（即访问权限不允许缩小）。</li><li>覆盖方法不能比原方法抛出更多的异常。</li><li>被覆盖的方法不能是final类型，因为final修饰的方法是无法覆盖的。</li><li>被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</li><li>被覆盖的方法不能为static。如果父类中的方法为静态的，而子类中的方法不是静态的，但是两个方法除了这一点外其他都满足覆盖条件，那么会发生编译错误；反之亦然。即使父类和子类中的方法都是静态的，并且满足覆盖条件，但是仍然不会发生覆盖，因为静态方法是在编译的时候把静态方法和类的引用类型进行匹配。</li></ol></li><li><p>覆盖和重载的不同：</p><ol><li>方法覆盖要求参数列表必须一致，而方法重载要求参数列表必须不一致。</li><li>方法覆盖要求返回类型必须一致，方法重载对此没有要求。</li><li>方法覆盖只能用于子类覆盖父类的方法，方法重载用于同一个类中的所有方法（包括从父类中继承而来的方法）。</li><li>方法覆盖对方法的访问权限和抛出的异常有特殊的要求，而方法重载在这方面没有任何限制。</li><li>父类的一个方法只能被子类覆盖一次，而一个方法可以在所有的类中可以被重载多次。</li></ol></li></ul></li><li><p>Java多态和动态绑定<br><strong>多态存在的三个必要条件：要有继承、要有重写、父类变量引用子类对象。</strong></p><ul><li>当使用多态方式调用方法时：<ul><li>首先检查父类中是否有该方法，如果没有，则编译错误；如果有，则检查子类是否覆盖了该方法。</li><li>如果子类覆盖了该方法，就调用子类的方法，否则调用父类方法。</li></ul></li></ul></li><li><p>Java instanceof 运算符<br>instanceof 运算符用来判断一个变量所引用的对象的实际类型，注意是它引用的对象的类型，不是变量的类型</p></li><li><p>多态对象的类型转换<br>不能直接将父类的对象强制转换为子类类型，只能将向上转型后的子类对象再次转换为子类类型。也就是说，<strong>子类对象必须向上转型后，才能再向下转型。</strong></p></li><li><p>ava static关键字</p><ul><li>类变量(class variables)用关键字 static 修饰，在类加载的时候，分配类变量的内存，以后再生成类的实例对象时，将共享这块内存（类变量），任何一个对象对类变量的修改，都会影响其它对象。外部有两种访问方式：通过对象来访问或通过类名来访问。</li><li>关于静态变量和静态方法的总结：</li></ul><ol><li>一个类的静态方法只能访问静态变量；</li><li>一个类的静态方法不能够直接调用非静态方法；</li><li>如访问控制权限允许，静态变量和静态方法也可以通过对象来访问，但是不被推荐；</li><li>静态方法中不存在当前对象，因而不能使用this，当然也不能使用 super；</li><li>静态方法不能被非静态方法覆盖；</li><li>构造方法不允许声明为 static 的；</li><li>局部变量不能使用static修饰。</li></ol></li><li><p>Java final关键字<br>final 所修饰的数据具有“终态”的特征，表示“最终的”意思。具体规定如下：</p></li></ul><ol><li>final 修饰的类不能被继承。</li><li>final 修饰的方法不能被子类重写。</li><li>final 修饰的变量（成员变量或局部变量）即成为常量，只能赋值一次。</li><li>final 修饰的成员变量必须在声明的同时赋值，如果在声明的时候没有赋值，那么只有一次赋值的机会，而且只能在构造方法中显式赋值，然后才能使用。</li><li>final 修饰的局部变量可以只声明不赋值，然后再进行一次性的赋值。</li></ol><ul><li><p>Java Object类</p><ul><li><p>equals()方法用来检测一个对象是否等价于另外一个对象，语法为： public boolean equals(Object obj)</p><p>  注意：</p><ol><li>equals()方法只能比较引用类型，“==”可以比较引用类型及基本类型。</li><li>当用 equals() 方法进行比较时，对类 File、String、Date 及包装类来说，是比较类型及内容而不考虑引用的是否是同一个实例。</li><li>用“==”进行比较时，符号两边的数据类型必须一致（可自动转换的数据类型除外），否则编译出错，而用 equals 方法比较的两个数据只要都是引用类型即可。</li></ol></li><li><p>hashCode() 方法</p><ol><li>在同一个应用程序执行期间，对同一个对象调用 hashCode()，必须返回相同的整数结果——前提是 equals()所比较的信息都不曾被改动过。至于同一个应用程序在不同执行期所得的调用结果，无需一致。</li><li>如果两个对象被equals()方法视为相等，那么对这两个对象调用hashCode()必须获得相同的整数结果。</li><li>如果两个对象被equals()方法视为不相等，那么对这两个对象调用 hashCode()不必产生不同的整数结果。然而程序员应该意识到，对不同对象产生不同的整数结果，有可能提升hashTable（后面会学到，集合框架中的一个类）的效率。</li></ol></li><li>toString() 方法<br>  返回当前对象的类型和内存地址信息</li></ul></li></ul><h2 id="十一、Java抽象类的概念和使用"><a href="#十一、Java抽象类的概念和使用" class="headerlink" title="十一、Java抽象类的概念和使用"></a>十一、Java抽象类的概念和使用</h2><ul><li>使用 abstract 修饰符来表示抽象方法和抽象类。<ul><li>抽象类不能直接使用，必须用子类去实现抽象类，然后使用其子类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例，也就是可以使用抽象类来充当形参，实际实现类作为实参，也就是多态的应用。</li><li>不能有抽象构造方法或抽象静态方法。 </li></ul></li></ul><p>在下列情况下，一个类将成为抽象类：</p><ul><li>当一个类的一个或多个方法是抽象方法时；</li><li>当类是一个抽象类的子类，并且不能为任何抽象方法提供任何实现细节或方法主体时；</li><li>当一个类实现一个接口，并且不能为任何抽象方法提供实现细节或方法主体时；注意：<ul><li>这里说的是这些情况下一个类将成为抽象类，没有说抽象类一定会有这些情况。</li><li>一个典型的错误：抽象类一定包含抽象方法。 但是反过来说“包含抽象方法的类一定是抽象类”就是正确的。</li><li>事实上，抽象类可以是一个完全正常实现的类</li></ul></li></ul><p>持续更新中~</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;java有三个版本： 分别为 J2SE、J2EE和J2ME
    - J2SE(Java 2 Platform Standard Edition) 标准版
    - J2EE(Java 2 Platform Enterprise Edition) 企业版
    - J2ME(Java 2 Platform Micro Edition) 微型版

注意: Java5.0版本后，J2SE、J2EE、J2ME分别更名为JavaSE、JavaEE、JavaME，由于习惯的原因，我们依然称之为J2SE、J2EE、J2ME
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.LanceYI.com/categories/notes/"/>
    
    
      <category term="skill" scheme="https://blog.LanceYI.com/tags/skill/"/>
    
      <category term="java" scheme="https://blog.LanceYI.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>腾讯免费安全认证（SSL）安装(CentOS,LAMP)</title>
    <link href="https://blog.LanceYI.com/notes/2018-06-02/ssl.html"/>
    <id>https://blog.LanceYI.com/notes/2018-06-02/ssl.html</id>
    <published>2018-06-02T02:30:51.000Z</published>
    <updated>2018-06-02T10:49:05.760Z</updated>
    
    <content type="html"><![CDATA[<p>第一次写博客，有点小紧张，搭建博客的主要目的呢，第一是解放自己浏览器的书签栏，真的是太多啦(～￣▽￣)～；第二是总结自己在工作的小难点，方便以后回顾避免再次入坑。好了，话不多说，开始我我们今天的主题吧。<br>下面就以我的个人服务器和域名作为案例讲解，服务器（阿里云）,系统CenteOS 64位 , 域名（腾讯云），下面可能会用到Linux的命令，如果你还不会的话，可以先照着我的做，或者你自己恶补一下。</p><a id="more"></a><blockquote><p>工作前准备</p></blockquote><ul><li><strong>一台服务器（阿里云,如果你是腾讯的服务器就更好了，那样你就只需要备案一次就可以了）</strong></li><li><strong>一个域名（腾讯云购买）</strong></li><li><strong>申请SSL证书  <a href="https://buy.cloud.tencent.com/ssl" target="_blank" rel="noopener">传送门-&gt;SSL证书选购</a></strong></li></ul><p><img src="http://files.ydsweb.cn/image/ssl/%7BIG7N%5BWE5L%5B5PM5%60FH2UD%25I.png" alt="申请免费版(DV)"></p><p>这个过程需要一点时间，需要腾讯那边进行审核。不过处理还是很快的！</p><ul><li><strong>下载证书</strong></li></ul><p><img src="http://files.ydsweb.cn/image/ssl/~@U4EJC4VDTCGIF~5AE_5TF.png" alt="下载证书"></p><p>申请成功后，将你要配置的域名证书下载下来。这里我配置的是www的域名，打开文件Apache文件下，里面有是三个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1_root_bundle.crt</span><br><span class="line">2_www.ydsweb.cn.crt</span><br><span class="line">3_www.ydsweb.cn.key</span><br></pre></td></tr></table></figure></p><p>这三个文件非常重要，是我们后面配置的SSL重要关键.<br><img src="http://files.ydsweb.cn/image/ssl/K6%6051L@4QQHPZ1CQ3%5DXE%5D$H.png" alt="证书文件"></p><blockquote><p>开始服务器配置</p></blockquote><ul><li>首先购买自己的服务器，购买好之后，在<strong>镜像市场</strong>选择安装的进项，我这是安装的是<strong>LAMP环境（CentOS7.4 Apache PHP5.3～7.2）</strong> <a href="https://market.aliyun.com/products/53398003/cmjj008071.html?spm=5176.2020520132.101.11.cPSqsS" target="_blank" rel="noopener">传送门-&gt;LAMP环境</a><br>主要有功能亮点 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 基于阿里云（CentOS7.4 64位）系统源码安装，安全、稳定、高效！</span><br><span class="line">2. 源码编译安装，细节安全优化，纯命令行，占用系统资源低</span><br><span class="line">3. 支持切换至7.2、7.1、7.0、5.6、5.5、5.4、5.3版本</span><br><span class="line">4. jemalloc优化Nginx、MySQL内存管理</span><br><span class="line">5. 交互添加Nginx虚拟主机，方便快捷, 内置Let&apos;s Encrypt</span><br><span class="line">6. 菜单式FTP账号管理脚本，轻松建立ftp虚拟用户</span><br><span class="line">7. 提供在线Nginx、MySQL、PHP、Redis、Memcached、phpMyAdmin升级脚本</span><br><span class="line">8. 提供本地备份和远程备份（服务器之间rsync）、内网阿里云OSS备份功能</span><br></pre></td></tr></table></figure></li></ul><p>在这里我附带一份开发手册<a href="http://files.ydsweb.cn/CentOS%20LAMP%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8CV1.5.pdf" target="_blank" rel="noopener">CentOS LAMP镜像使用手册V1.5.pdf</a></p><p>安装完成之后，你需要完成以下几个操作，一是为了服务器的安全，二是为了方便后面有些列操作，手册中已经写了相关注意事项，我还是归类以下吧，以便我们后面步骤。</p><ul><li>修改PHP运行环境的探针 <a href="http://IP地址/tz.php" target="_blank" rel="noopener">http://IP地址/tz.php</a>, 只需要修改文件名就可以了。</li><li>修改phpmyadmin管理地址 <a href="http://IP地址/phpMyAdmin" target="_blank" rel="noopener">http://IP地址/phpMyAdmin</a> <strong>#注意大小写，为了安全建议重命名或者删除</strong></li><li>修改MySQL数据库密码 <strong>注意: 密码不为空,你需要去查看密码，创建LAMP的时候，每个的密码都不一样，当然用户名是一样的（root）</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp14x52bqj1mdtwni4zsz /]# cd root/oneinstack/</span><br><span class="line">[root@izbp14x52bqj1mdtwni4zsz oneinstack]# grep dbrootpwd options.conf </span><br><span class="line">dbrootpwd=&apos;xxxxxxxxxxx&apos;</span><br><span class="line">[root@izbp14x52bqj1mdtwni4zsz oneinstack]#</span><br></pre></td></tr></table></figure><ul><li>创建FTP账号，方便上传文件()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp14x52bqj1mdtwni4zsz /]# cd root/oneinstack/</span><br><span class="line">[root@izbp14x52bqj1mdtwni4zsz oneinstack]# ./pureftpd_vhost.sh</span><br></pre></td></tr></table></figure><p><img src="http://files.ydsweb.cn/image/ssl/YWWVFB%28O44XDS9H4NI3%5D1H7.png" alt="创建步骤"></p><ul><li>添加虚拟主机，架设我们的网站存放目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp14x52bqj1mdtwni4zsz /]# cd root/oneinstack/</span><br><span class="line">[root@izbp14x52bqj1mdtwni4zsz oneinstack]# ./vhost.sh</span><br></pre></td></tr></table></figure><blockquote><p>配置开放端口及其服务器配置</p></blockquote><ul><li><p>配置服务器入站开放的端口<br><strong>控制台 -&gt; ECS -&gt; 安全组 -&gt; 配置规则 -&gt; 配置常用端口(如: 80, 3389, 21, 443等)</strong><br><strong>注意： 443端口安全认证跳转到80端口入口，必须开启，这里提供了一份我导入的端口配置，你可以直接导入使用，<a href="http://files.ydsweb.cn/image/ssl/ecs_cn-hangzhou_sg-bp1h715qlfero6plo6vf.json" target="_blank" rel="noopener">入站端口配置文件JSON</a></strong></p></li><li><p>根据我们自己的FTP账号登录服务器，上传一份静态文件index.html</p></li></ul><p><img src="http://files.ydsweb.cn/image/ssl/%25NX8R713A%2906ESYB%5BP%7D_W%7BQ.png" alt="本地文件上传到服务器"></p><p>上传成功后，在浏览器中输入你的网址<a href="http://www.ydsweb.cn/" target="_blank" rel="noopener">http://www.ydsweb.cn/</a>，网页正常打开，说明网站现在已经部署成功了；但是，当你输入<a href="https:// www.ydsweb.cn" target="_blank" rel="noopener">https:// www.ydsweb.cn</a>你会发现打不开，为什么呢？不要着急，我们已经离成功不远啦~话不多说，我们接着往下走…</p><ul><li>使用FTP上传我们最开始下载申请的证书（SSL）文件<ul><li>首先我们在远程站点服务器上创建一个SSL文件夹</li><li>然后将我们下载下来的Apache文件下的3个文件上传到服务器。</li></ul></li></ul><p><img src="http://files.ydsweb.cn/image/ssl/Q2@O7%5DTE%5D%7DC%25C1J%25%7D@FPIDF.png" alt="本地文件上传到服务器"></p><ul><li>将上传的文件用Linux命令移动到你Apache conf文件夹下：</li></ul><p>需要注意的是：确保你的conf/httpd.conf 在你的Apache文件下面，由于我这里是切换了版本，切换至7.2最高版本了<br><strong>切换到 usr/local/apache72/conf 下面 使用mr [源文件路径] [目标路径] 将文件移动过来</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp14x52bqj1mdtwni4zsz /]# cd /usr/local/apache/conf</span><br><span class="line">[root@izbp14x52bqj1mdtwni4zsz conf]# mr /data/wwwroot/SSL /usr/local/apache/conf    #参数说明 mr [源文件路径] [目标路径]</span><br><span class="line">[root@izbp14x52bqj1mdtwni4zsz conf]# ls</span><br><span class="line">extra  httpd.conf  httpd.conf.bak  magic  mime.types  original  SSL  vhost</span><br></pre></td></tr></table></figure><p>如果你当前的文件夹下面有SSL文件夹，表示你已经成功移动过来了，那么配置就剩下最后两步就大功告成啦~</p><ul><li>配置Apache配置文件，打开conf/httpd.conf 文件</li></ul><p>找到 #LoadModule ssl_module modules/mod_ssl.so 和 #Include conf/extra/httpd-ssl.conf，去掉前面的#号注释；<br><strong>注意：查看文档里面Listen: 443 端口是否监听，如果没，请在Listen: 80 下面添加一句 Listen: 443</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp14x52bqj1mdtwni4zsz conf]# vi httpd.conf  #注释: 打开后进入不可编辑状态的模式，输入i进入编辑模式，去掉#之后，按esc键，输入wq回车，保存退出</span><br></pre></td></tr></table></figure><p>编辑apache72根目录下 conf/vhost/你的域名.conf 文件，修改如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">## 注释：建议在本地记事本上先改好，勿忘www.ydsweb.cn 换成你自己的域名 ##</span><br><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">    DocumentRoot &quot;/data/wwwroot/www.ydsweb.cn/&quot;  </span><br><span class="line">    ServerName www.ydsweb.cn</span><br><span class="line">    SSLEngine on</span><br><span class="line">    SSLCertificateFile /usr/local/apache72/conf/SSL/2_www.ydsweb.cn.crt  #注释: 记得更换路径和文件名称(主要是书序不要错了，还有就是路径不要错了！)</span><br><span class="line">    SSLCertificateKeyFile /usr/local/apache72/conf/SSL/3_www.ydsweb.cn.key</span><br><span class="line">    SSLCertificateChainFile /usr/local/apache72/conf/SSL/1_root_bundle.crt</span><br><span class="line">    &lt;!-- star --&gt;</span><br><span class="line">    &lt;Directory &quot;/data/wwwroot/www.ydsweb.cn&quot;&gt;</span><br><span class="line">      SetOutputFilter DEFLATE</span><br><span class="line">      Options FollowSymLinks ExecCGI</span><br><span class="line">      Require all granted</span><br><span class="line">      AllowOverride All</span><br><span class="line">      Order allow,deny</span><br><span class="line">      Allow from all</span><br><span class="line">      DirectoryIndex index.html index.php</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    &lt;!-- end --&gt;</span><br><span class="line">    #注释：&lt;!-- --&gt;中间部分建议直接复制你conf/vhost/你的域名.conf里面监听80中间的那一段。在记事本中一定要记得要把我这些注释删除掉哦~</span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>接下来就是将记事本的写的内容复制，然后再命令控制台中粘贴在文件内容的后面！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@izbp14x52bqj1mdtwni4zsz conf]# vi vhost/你的域名.conf</span><br></pre></td></tr></table></figure><blockquote><p>重启Apache服务</p></blockquote><pre><code>[root@izbp14x52bqj1mdtwni4zsz conf]# service httpd restart</code></pre><p>完成所有步骤之后你就能使用https访问你的网站啦~不过因为我的服务器是在阿里云买的，所以还得在阿里云备案，不过不备案的话，只能访问到https,访问不到http协议下的网站。</p><p><strong>如果有什么疑问可以留言，我会第一时间回复你~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次写博客，有点小紧张，搭建博客的主要目的呢，第一是解放自己浏览器的书签栏，真的是太多啦(～￣▽￣)～；第二是总结自己在工作的小难点，方便以后回顾避免再次入坑。好了，话不多说，开始我我们今天的主题吧。&lt;br&gt;下面就以我的个人服务器和域名作为案例讲解，服务器（阿里云）,系统CenteOS 64位 , 域名（腾讯云），下面可能会用到Linux的命令，如果你还不会的话，可以先照着我的做，或者你自己恶补一下。&lt;/p&gt;
    
    </summary>
    
      <category term="notes" scheme="https://blog.LanceYI.com/categories/notes/"/>
    
    
      <category term="skill" scheme="https://blog.LanceYI.com/tags/skill/"/>
    
      <category term="liunx" scheme="https://blog.LanceYI.com/tags/liunx/"/>
    
      <category term="LAMP" scheme="https://blog.LanceYI.com/tags/LAMP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.LanceYI.com/life/2018-06-01/hello-world.html"/>
    <id>https://blog.LanceYI.com/life/2018-06-01/hello-world.html</id>
    <published>2018-06-01T15:40:03.000Z</published>
    <updated>2018-06-02T02:17:41.595Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://blog.LanceYI.com/categories/life/"/>
    
    
      <category term="life" scheme="https://blog.LanceYI.com/tags/life/"/>
    
      <category term="hexo" scheme="https://blog.LanceYI.com/tags/hexo/"/>
    
  </entry>
  
</feed>
